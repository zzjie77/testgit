git reset --hard commit_id #版本回退，也可回到未来，通过git reflog查看未来版本

比较最新版本与工作区的1.txt
git diff HEAD -- 1.txt

第一次修改 -> add -> 第二次修改 -> commit   #第二次修改没有add,所以commit的时候不会提交第二次修改

git checkout -- readme.txt #可以丢弃工作区的修改。  注意--很重要，没有--就变成切换分支


场景1：当你改乱了工作区某个件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


$ ssh-keygen -t rsa -C "youremail@example.com"   生成ssh key
登录github -> Account settings -> SSH Keys -> Add SSH Key -> title随便填 -> 在Key本框里粘贴id_rsa.pub件的内容


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快


查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name


当Git1法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。
git log --graph --pretty=oneline --abbrev-commit

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。



